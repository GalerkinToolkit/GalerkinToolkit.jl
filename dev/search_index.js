var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GalerkinToolkit","category":"page"},{"location":"#GalerkinToolkit","page":"Home","title":"GalerkinToolkit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GalerkinToolkit.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GalerkinToolkit]","category":"page"},{"location":"#GalerkinToolkit.GenericJaggedArray","page":"Home","title":"GalerkinToolkit.GenericJaggedArray","text":"struct GenericJaggedArray{T,A,B}\n\nGeneralization of JaggedArray, where the fields data and ptrs are allowed to be any array-like object.\n\nProperties\n\ndata::A\nptrs::B\n\nSupertype hierarchy\n\nGenericJaggedArray{V,A,B} <: AbstractVector{V}\n\nGiven a::GenericJaggedArray, V is typeof(view(a.data,a.ptrs[i]:(a.ptrs[i+1]-1))).\n\n\n\n\n\n","category":"type"},{"location":"#GalerkinToolkit.GenericJaggedArray-Tuple{Any, Any}","page":"Home","title":"GalerkinToolkit.GenericJaggedArray","text":"GenericJaggedArray(data,ptrs)\n\nCreate a GenericJaggedArray from the given data and ptrs fields. The resulting object stores references to the given vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinToolkit.JaggedArray","page":"Home","title":"GalerkinToolkit.JaggedArray","text":"struct JaggedArray{T,Ti}\n\nEfficient implementation of a vector of vectors. The inner vectors are stored one after the other in consecutive memory locations using an auxiliary vector data. The range of indices corresponding to each inner vector are encoded using a vector of integers ptrs.\n\nProperties\n\ndata::Vector{T}\nptrs::Vector{Ti}\n\nGiven a::JaggedArray, a.data contains the inner vectors. The i-th inner vector is stored in the range a.ptrs[i]:(a.ptrs[i+1]-1). The number of inner vectors (i.e. length(a)) is length(a.ptrs)-1. a[i] returns a view of a.data restricted to the range a.ptrs[i]:(a.ptrs[i+1]-1).\n\nSupertype hierarchy\n\nJaggedArray{T,Ti} <: AbstractVector{V}\n\nGiven a::JaggedArray, V is typeof(view(a.data,a.ptrs[i]:(a.ptrs[i+1]-1))).\n\n\n\n\n\n","category":"type"},{"location":"#GalerkinToolkit.JaggedArray-Union{Tuple{AbstractArray{<:AbstractArray{T}}}, Tuple{T}} where T","page":"Home","title":"GalerkinToolkit.JaggedArray","text":"JaggedArray(a)\n\nCreate a JaggedArray object from the vector of vectors a. If a::JaggedArray, then a is returned. Otherwise, the contents of a are copied.\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinToolkit.JaggedArray-Union{Tuple{Ti}, Tuple{T}, Tuple{Vector{T}, Vector{Ti}}} where {T, Ti}","page":"Home","title":"GalerkinToolkit.JaggedArray","text":"JaggedArray(data::Vector,ptrs::Vector)\n\nCreate a JaggedArray from the given data and ptrs fields. The resulting object stores references to the given vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinToolkit.jagged_array-Tuple{Any, Any}","page":"Home","title":"GalerkinToolkit.jagged_array","text":"jagged_array(data,ptrs)\n\nCreate a JaggedArray or a GenericJaggedArray object depending on the type of data and ptrs. The returned object stores references to the given inputs.\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinToolkit.prefix!-Tuple{Any}","page":"Home","title":"GalerkinToolkit.prefix!","text":"prefix!(a)\n\nSets a[1]=1 and then a[i+1]=a[i] for i in 1:length(a)\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinToolkit.rewind!-Tuple{Any}","page":"Home","title":"GalerkinToolkit.rewind!","text":"rewind!(a)\n\nSets a[i+1]=a[i] for i in (length(a)-1):-1:1 and finally a[1]=1.\n\n\n\n\n\n","category":"method"}]
}
