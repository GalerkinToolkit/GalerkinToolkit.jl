name: CI
on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: GalerkinToolkit / Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        with:
          prefix: xvfb-run -s '-screen 0 1024x768x24'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info
  examples:
    name: GalerkinToolkitExamples / Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      - uses: julia-actions/julia-buildpkg@v1
      - run: |
          julia --project=GalerkinToolkitExamples -e '
            using Pkg
            Pkg.develop(path=".")
            Pkg.test("GalerkinToolkitExamples")'

  all_tests:
    name: All Tests and Examples
    runs-on: ubuntu-latest
    needs: [test, examples]
    steps:
      - name: All test jobs have been successful        
        run: |
          echo "All test jobs have been successful"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - uses: julia-actions/julia-buildpkg@v1
      - name: Prepare environment for xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev mesa-utils xvfb libgl1 freeglut3-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev
      - name: Install dependencies
        run: |
          DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            Pkg.build("GLMakie")'
      - name: Build and deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: |
          DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --project=docs -e 'include("docs/make.jl")'

  benchmark:
    name: Run performance regression tests

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: runner.os−test−env.cache−name−{{ hashFiles('**/Project.toml') }}
          restore-keys: |
            runner.os−test−
            ${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - name: Run benchmark
        run: |
          julia --project=GalerkinToolkitExamples -e '
            using Pkg
            Pkg.develop(path=".")
            include("GalerkinToolkitExamples/benchmarks/run_benchmarks.jl")'
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Julia benchmark result
          tool: 'julia'
          output-file-path: output.json
          gh-pages-branch: benchmarks
          benchmark-data-dir-path: bench
          # Use personal access token instead of GITHUB_TOKEN due to https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true

  copybenchmarks:
    name: Copy benchmark results to gh-pages
    needs: [benchmark, docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
      - name: Checkout benchmarks branch
        uses: actions/checkout@v4
        with:
          ref: benchmarks
          path: benchmarks
      - name: Copy benchmark results to gh-pages
        run: |
          cp -r benchmarks/bench gh-pages/dev/
          cd gh-pages
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -A
          git commit -m 'Copy benchmark results to documentation on gh-pages'
          git push
